./z325719dir/SEER_NCI/ksh
./mvm_etl.sh

root@f96a4f5da091:/z325719dir/SEER_NCI/RETAIL_MONTHLY_INCREMENTAL_DATA# ls
SEER_CVS_PharmacyDrug_202301_0.txt  SEER_CVS_PharmacyDrug_202301_TAG_0.txt

root@f96a4f5da091:/z325719dir/SEER_NCI/RETAIL_MONTHLY_INCREMENTAL_DATA# ls SEER_CVS_PharmacyDrug* | wc -l
2


root@f96a4f5da091:/z325719dir/SEER_NCI/RETAIL_MONTHLY_INCREMENTAL_DATA# ls -tr| gr
ep -i SEER_CVS_PharmacyDrug
SEER_CVS_PharmacyDrug_202301_TAG_0.txt
SEER_CVS_PharmacyDrug_202301_0.txt


root@f96a4f5da091:/z325719dir/SEER_NCI/log# ls -lr
total 16
-rw-r--r-- 1 root root 1760 Feb  7 00:20 mvm_etl.sh.07022023-002031
-rw-r--r-- 1 root root  961 Feb  7 00:17 mvm_etl.sh.07022023-001723
-rw-r--r-- 1 root root  849 Feb  6 23:59 mvm_etl.sh.06022023-235917
-rw-r--r-- 1 root root 1738 Feb  6 23:39 mvm_etl.sh.06022023-233904


**** Log File name /z325719dir/SEER_NCI/log/mvm_etl.sh.08022023-220749     ***
**** Home Location /z325719dir     ***
**** Shell Script name mvm_etl.sh   ***
/z325719dir/SEER_NCI/log/mvm_etl.sh.08022023-220749
Retail file name /CVSWINDOWNET/sFTP_Data/Prod/IDW/Retailfiles/SEER_CVS_PharmacyDrug_202301_TAG_0.txt
File (/CVSWINDOWNET/sFTP_Data/Prod/IDW/Retailfiles/SEER_CVS_PharmacyDrug_202301_TAG_0.txt) Found and Accessible
File (/CVSWINDOWNET/sFTP_Data/Prod/IDW/Retailfiles/SEER_CVS_PharmacyDrug_202301_0.txt) Found and Accessible
Password Function
Setting local variables from global values
Setting up temp file
obtaining passphrase for gpg file
decrypting gpg file
gpg: encrypted with 3072-bit RSA key, ID D73FF1E0547608EB, created 2023-02-07
      "Shailendr Joshi <shjoshare@gmail.com>"
setting variable
Password is  Welcome12#
SEER_CVS_PharmacyDrug_202301_TAG_0.txt SEER_CVS_PharmacyDrug_202301_0.txt
/CVSWINDOWNET/sFTP_Data/Prod/IDW/Retailfiles/SEER_CVS_PharmacyDrug_202301_TAG_0.txt

***************************************************
STEP010 :  SCP Get Step with Checksum:  22:07:54
************************************ ***************
Error Check Return Code:  0
Checksums match between Source and Destn.

/CVSWINDOWNET/sFTP_Data/Prod/IDW/Retailfiles/SEER_CVS_PharmacyDrug_202301_0.txt

***************************************************
STEP010 :  SCP Get Step with Checksum:  22:07:54
************************************ ***************
Error Check Return Code:  0
Checksums match between Source and Destn.

******************************************************
 STEP010 : JOB  job_mvm_ims_elt_extract  downloading from Windows network Retail file(s)  : 22:07:54
******************************************************
Error Check Return Code:  0
******************************************************
STEP999 : SEND EMAIL  22:07:54
******************************************************
Error Check Return Code:  0

******************************************************
*** SUCCESS:  mvm_etl.sh HAS COMPLETED SUCCESSFULLY! ***
******************************************************


root@f96a4f5da091:/z325719dir/SEER_NCI/log# cat mvm_etl.sh.08022023-220749
Retail file name /CVSWINDOWNET/sFTP_Data/Prod/IDW/Retailfiles/SEER_CVS_PharmacyDrug_202301_TAG_0.txt
File (/CVSWINDOWNET/sFTP_Data/Prod/IDW/Retailfiles/SEER_CVS_PharmacyDrug_202301_TAG_0.txt) Found and Accessible
File (/CVSWINDOWNET/sFTP_Data/Prod/IDW/Retailfiles/SEER_CVS_PharmacyDrug_202301_0.txt) Found and Accessible
Password Function
Setting local variables from global values
Setting up temp file
obtaining passphrase for gpg file
decrypting gpg file
setting variable
Password is  Welcome12#
SEER_CVS_PharmacyDrug_202301_TAG_0.txt SEER_CVS_PharmacyDrug_202301_0.txt
/CVSWINDOWNET/sFTP_Data/Prod/IDW/Retailfiles/SEER_CVS_PharmacyDrug_202301_TAG_0.txt

***************************************************
STEP010 :  SCP Get Step with Checksum:  22:07:54
************************************ ***************
Error Check Return Code:  0
Checksums match between Source and Destn.

/CVSWINDOWNET/sFTP_Data/Prod/IDW/Retailfiles/SEER_CVS_PharmacyDrug_202301_0.txt

***************************************************
STEP010 :  SCP Get Step with Checksum:  22:07:54
************************************ ***************
Error Check Return Code:  0
Checksums match between Source and Destn.

******************************************************
 STEP010 : JOB  job_mvm_ims_elt_extract  downloading from Windows network Retail file(s)  : 22:07:54
******************************************************
Error Check Return Code:  0
******************************************************
STEP999 : SEND EMAIL  22:07:54
******************************************************
Error Check Return Code:  0

******************************************************
*** SUCCESS:  mvm_etl.sh HAS COMPLETED SUCCESSFULLY! ***
******************************************************
******************************************************
*** SUCCESS:  mvm_etl.sh HAS COMPLETED SUCCESSFULLY! ***
******************************************************
root@f96a4f5da091:/z325719dir/SEER_NCI/log#








root@f96a4f5da091:/z325719dir/SEER_NCI/log# cat mvm_etl.sh.07022023-002031
Retail file name /CVSWINDOWNET/sFTP_Data/Prod/IDW/Retailfiles/SEER_CVS_PharmacyDrug_202301_TAG_0.txt
File (/CVSWINDOWNET/sFTP_Data/Prod/IDW/Retailfiles/SEER_CVS_PharmacyDrug_202301_TAG_0.txt) Found and Accessible
File (/CVSWINDOWNET/sFTP_Data/Prod/IDW/Retailfiles/SEER_CVS_PharmacyDrug_202301_0.txt) Found and Accessible
SEER_CVS_PharmacyDrug_202301_TAG_0.txt SEER_CVS_PharmacyDrug_202301_0.txt
/CVSWINDOWNET/sFTP_Data/Prod/IDW/Retailfiles/SEER_CVS_PharmacyDrug_202301_TAG_0.txt

***************************************************
STEP010 :  SCP Get Step with Checksum:  00:20:32
************************************ ***************
Error Check Return Code:  0
Checksums match between Source and Destn.

/CVSWINDOWNET/sFTP_Data/Prod/IDW/Retailfiles/SEER_CVS_PharmacyDrug_202301_0.txt

***************************************************
STEP010 :  SCP Get Step with Checksum:  00:20:32
************************************ ***************
Error Check Return Code:  0
Checksums match between Source and Destn.

******************************************************
 STEP010 : JOB  job_mvm_ims_elt_extract  downloading from Windows network Retail file(s)  : 00:20:32
******************************************************
Error Check Return Code:  0
******************************************************
STEP999 : SEND EMAIL  00:20:32
******************************************************
Error Check Return Code:  0

******************************************************
*** SUCCESS:  mvm_etl.sh HAS COMPLETED SUCCESSFULLY! ***
******************************************************
******************************************************
*** SUCCESS:  mvm_etl.sh HAS COMPLETED SUCCESSFULLY! ***
******************************************************
root@f96a4f5da091:/z325719dir/SEER_NCI/log#






adduser sas_account
name SAS Server 
cat /etc/passwd

grep '^sas' /etc/passwd
root@f96a4f5da091:/# grep '^sas' /etc/passwd
sas_account:x:1000:1000:SAS Server,,,:/home/sas_account:/bin/bash

gpg -r shjoshare@gmail.com -e .credential



docker cp C:\UNIX\MyUNIXwork\centosOS_Docker\Retailfiles f96a4f5da091:/CVSWINDOWNET/sFTP_Data/Prod/IDW
docker cp C:\UNIX\MyUNIXwork\centosOS_Docker\Retailfiles f96a4f5da091:/CVSWINDOWNET/sFTP_Data/Prod/IDW
docker cp C:\UNIX\MyUNIXwork\centosOS_Docker\Retailfiles f96a4f5da091:/CVSWINDOWNET/sFTP_Data/Prod/IDW
docker cp C:\UNIX\MyUNIXwork\centosOS_Docker\.credential f96a4f5da091:/z325719dir/SEER_NCI/util/.credential


PS C:\Users\shail> docker cp C:\UNIX\MyUNIXwork\centosOS_Docker\Retailfiles\ f96a4f5da091:/CVSWINDOWNET/sFTP_Data/Prod/IDW
PS C:\Users\shail> docker cp C:\UNIX\MyUNIXwork\centosOS_Docker\create_dirs.sh f96a4f5da091:/shjo/create_dirs.sh
PS C:\Users\shail> docker cp C:\UNIX\MyUNIXwork\centosOS_Docker\mvm_etl.sh f96a4f5da091:/z325719dir/SEER_NCI/ksh/mvm_etl.sh



docker cp C:\UNIX\MyUNIXwork\centosOS_Docker\env_mvm f96a4f5da091:/z325719dir/SEER_NCI/util/env/env_mvm


chmod +x /z325719dir/SEER_NCI/ksh/mvm_etl.sh
chmod a+r /CVSWINDOWNET/sFTP_Data/Prod/IDW/Retailfiles
chmod +x /shjo/create_dirs.sh

root@f96a4f5da091:/z325719dir/SEER_NCI/ksh# cksum /CVSWINDOWNET/sFTP_Data/Prod/IDW/Retailfiles/SEER_CVS_PharmacyDrug_202301_0.txt
1350648407 79 /CVSWINDOWNET/sFTP_Data/Prod/IDW/Retailfiles/SEER_CVS_PharmacyDrug_202301_0.txt


root@f96a4f5da091:/z325719dir/SEER_NCI/ksh# cksum /CVSWINDOWNET/sFTP_Data/Prod/IDW/Retailfiles/SEER_CVS_PharmacyDrug_202301_0.txt | awk '{print $1}'
1350648407

root@f96a4f5da091:/z325719dir/SEER_NCI/ksh# ./mvm_etl.sh
Setting ENV variables
**** Log File name /z325719dir/SEER_NCI/log/mvm_etl.sh.07022023-002031     ***
**** Home Location /root     ***
**** Shell Script name mvm_etl.sh   ***
/z325719dir/SEER_NCI/log/mvm_etl.sh.07022023-002031
Retail file name /CVSWINDOWNET/sFTP_Data/Prod/IDW/Retailfiles/SEER_CVS_PharmacyDrug_202301_TAG_0.txt
File (/CVSWINDOWNET/sFTP_Data/Prod/IDW/Retailfiles/SEER_CVS_PharmacyDrug_202301_TAG_0.txt) Found and Accessible
File (/CVSWINDOWNET/sFTP_Data/Prod/IDW/Retailfiles/SEER_CVS_PharmacyDrug_202301_0.txt) Found and Accessible
SEER_CVS_PharmacyDrug_202301_TAG_0.txt SEER_CVS_PharmacyDrug_202301_0.txt
/CVSWINDOWNET/sFTP_Data/Prod/IDW/Retailfiles/SEER_CVS_PharmacyDrug_202301_TAG_0.txt

***************************************************
STEP010 :  SCP Get Step with Checksum:  00:20:32
************************************ ***************
Error Check Return Code:  0
Checksums match between Source and Destn.

/CVSWINDOWNET/sFTP_Data/Prod/IDW/Retailfiles/SEER_CVS_PharmacyDrug_202301_0.txt

***************************************************
STEP010 :  SCP Get Step with Checksum:  00:20:32
************************************ ***************
Error Check Return Code:  0
Checksums match between Source and Destn.

******************************************************
 STEP010 : JOB  job_mvm_ims_elt_extract  downloading from Windows network Retail file(s)  : 00:20:32
******************************************************
Error Check Return Code:  0
******************************************************
STEP999 : SEND EMAIL  00:20:32
******************************************************
Error Check Return Code:  0

******************************************************
*** SUCCESS:  mvm_etl.sh HAS COMPLETED SUCCESSFULLY! ***
******************************************************










cd util
mkdir env

docker cp C:\UNIX\MyUNIXwork\centosOS_Docker\create_dirs.sh f96a4f5da091:/shjo/create_dirs.sh

docker cp C:\UNIX\MyUNIXwork\centosOS_Docker\Retailfiles f96a4f5da091:/CVSWINDOWNET/sFTP_Data/Prod/IDW

run the image with interactiver terminal 
docker run -it my-ubuntu_shell

PS C:\Users\shail> docker ps
CONTAINER ID   IMAGE             COMMAND       CREATED       STATUS       PORTS     NAMES
8297f9d110d8   my-ubuntu_shell   "/bin/bash"   6 hours ago   Up 6 hours             condescending_lamarr
PS C:\Users\shail>

docker exec -it f96a4f5da091 bash

mkdir -p "$z325719dir/$SEER_NCI/$RETAIL_MONTHLY_INCREMENTAL_DATA"
mkdir -p "$z325719dir/$SEER_NCI/$MONTHLY_DATA_RELESE"

mkdir -p "$z325719dir/$SEER_NCI/$util/$env"


mkdir z325719dir
cd z325719dir
mkdir SEER_NCI

cd SEER_NCI
mkdir util

cd SEER_NCI
mkdir RETAIL_MONTHLY_INCREMENTAL_DATA
mkdir SEER-NCI-MONTHLY_DATA_RELESE

mkdir CVSWINDOWNET
cd CVSWINDOWNET
mkdir sFTP_Data
cd sFTP_Data

mkdir Prod
cd Prod
mkdir IDW


cd util
mkdir env
cd env 


SEER_NCI/ksh


root@8297f9d110d8:/# ls
CVSWINDOWNET  dev   lib    libx32  opt   run   sys  var
bin           etc   lib32  media   proc  sbin  tmp  z325719dir
boot          home  lib64  mnt     root  srv   usr
root@8297f9d110d8:/#

docker cp C:\UNIX\MyUNIXwork\centosOS_Docker\ 8297f9d110d8:/CVSWINDOWNET/sFTP_Data/Prod/IDW

docker cp C:\UNIX\MyUNIXwork\centosOS_Docker\Retailfiles 8297f9d110d8:/CVSWINDOWNET/sFTP_Data/Prod/IDW

docker cp C:\UNIX\MyUNIXwork\centosOS_Docker\env_mvm 8297f9d110d8:/z325719dir/SEER_NCI/util/env/env_mvm

docker cp C:\UNIX\MyUNIXwork\centosOS_Docker\mvm_etl.sh 8297f9d110d8:/z325719dir/SEER_NCI/ksh/mvm_etl.sh






root@8297f9d110d8:/z325719dir/SEER_NCI/ksh# ls
mvm_etl.sh
root@8297f9d110d8:/z325719dir/SEER_NCI/ksh# ./mvm_etl.sh
bash: ./mvm_etl.sh: /usr/bin/ksh: bad interpreter: No such file or directory

chmod +x mvm_etl.sh
chmod a+r /CVSWINDOWNET/sFTP_Data/Prod/IDW 



apt update
apt upgrade
apt-get install vim
vim --version


apt search vim
apt-cache search ^vim  # filter outputs using grep command #
apt-cache search vim | grep editor

echo $HOME
cd z325719dir
mkdir -p "SEER_NCI" && cd "SEER_NCI"
mkdir -p "util" && cd "util"
 
 #!/usr/bin/bash
cd z325719dir
mkdir -p "SEER_NCI" && cd "SEER_NCI"
mkdir -p "util" && cd "uti"
Press Esc to enter Command mode, and then type :wq to write and quit the file
 
mkdir z325719dir
cd z325719dir
mkdir SEER_NCI

cd SEER_NCI
mkdir util

cd SEER_NCI
mkdir RETAIL_MONTHLY_INCREMENTAL_DATA
mkdir SEER-NCI-MONTHLY_DATA_RELESE

mkdir CVSWINDOWNET
cd CVSWINDOWNET
mkdir sFTP_Data
cd sFTP_Data






root@8297f9d110d8:/z325719dir/SEER_NCI/ksh# ./mvm_etl.sh
Setting ENV variables
**** Log File name /z325719dir/SEER_NCI/log/mvm_etl.sh.05022023-011452     ***
**** Home Location /root     ***
**** Shell Script name mvm_etl.sh   ***
/z325719dir/SEER_NCI/log/mvm_etl.sh.05022023-011452
File (/CVSWINDOWNET/sFTP_Data/Prod/IDW/Retailfiles/SEER_CVS_PharmacyDrug_202301_TAG_0.txt) Found and Accessible
File (/CVSWINDOWNET/sFTP_Data/Prod/IDW/Retailfiles/SEER_CVS_PharmacyDrug_202301_0.txt) Found and Accessible
./mvm_etl.sh: line 141: SEER_CVS_PharmacyDrug_202301: command not found
./mvm_etl.sh: line 142: ssh: command not found
Usage: grep [OPTION]... PATTERNS [FILE]...
Try 'grep --help' for more information.
Alert: No Retail Files is available to copy from the remote server./CVSWINDOWNET/sFTP_Data/Prod/IDW/Retailfiles
******************************************************
 STEP010 : JOB  job_mvm_ims_elt_extract  downloading from Windows network Retail file(s)  : 01:14:52
******************************************************
/z325719dir/SEER_NCI/util/env/env_mvm: line 73: parameter_check: command not found
Error Check Return Code:  0
******************************************************
STEP999 : SEND EMAIL  01:14:52
******************************************************
/z325719dir/SEER_NCI/util/env/env_mvm: line 73: parameter_check: command not found
Error Check Return Code:  0

******************************************************
*** SUCCESS:  mvm_etl.sh HAS COMPLETED SUCCESSFULLY! ***
******************************************************

******************************************************
*** SUCCESS:  mvm_etl.sh HAS COMPLETED SUCCESSFULLY! ***
******************************************************
root@8297f9d110d8:/z325719dir/SEER_NCI/ksh#



SSH client is a program for logging into a remote machine and for executing commands on a remote machine. ssh connects and logs into the specified hostname.The user must prove his/her identity to the remote machine using one of several methods depending on the protocol version used. If command is specified, command is executed on the remote host instead of a login shell.


SSH general syntax
ssh user@hostname command

For example login into remote system called portal.nixcraft.com and find out who logged in, enter:
$ ssh admin@portal.nixcraft.com who

You can use same command in shell script. However, it will prompt for a password. To avoid password prompt you need to ssh keys based login as specified in our article for password less login. Next, you can create a sample shell script as follows:

$ vi sshscript.sh
Type the following shell script lines:

#!/bin/bash
# Linux/UNIX box with ssh key based login enabled
SERVER="192.168.1.1"
# SSH User name
USR="admin"
OUT="out.txt"
ssh $USR@$host w > $OUT
Save and close the file. Type the following command to execute the script:
$ chmod +x sshscript.sh
$ ./sshscript.sh

You can see output of script with cat command:
$ cat out.txt

for host in $Q_HOST
do
  #echo '<TD WIDTH=33% BGCOLOR="#0099ff">'
  echo '<TD BGCOLOR="#0099ff">'
  _CMD="$SSH $USR@$host"
  rhostname="$($_CMD hostname)"
 
  ruptime="$($_CMD uptime)"
  if $(echo $ruptime | grep -E "min|days" >/dev/null); then
    x=$(echo $ruptime | awk '{ print $3 $4}')
  else
    x=$(echo $ruptime | sed s/,//g| awk '{ print $3 " (hh:mm)"}')
  fi
  ruptime="$x"
 
  rload="$($_CMD uptime |awk -F'average:' '{ print $2}')"
  x="$(echo $rload | sed s/,//g | awk '{ print $2}')"
  y="$(echo "$x >= $LOAD_WARN" | bc)"
  [ "$y" == "1" ] && rload="$RED $rload (High) $NOC" || rload="$GREEN $rload (Ok) $NOC"
 
 
 
 



root@8297f9d110d8:/z325719dir/SEER_NCI/log# cat mvm_etl.sh.05022023-010620
mvm_etl.sh:STEP010 : No such file or directory or Not able to access (/CVSWINDOWNET/sFTP_Data/Prod/IDW/Retailfiles/Seer_CVS_PharmacyDrug_202301_TAG_0.txt)
Alert: No Retail Files is available to copy from the remote server./CVSWINDOWNET/sFTP_Data/Prod/IDW/Retailfiles
******************************************************
 STEP010 : JOB  job_mvm_ims_elt_extract  downloading from Windows network Retail file(s)  : 01:06:21
******************************************************
Error Check Return Code:  0
******************************************************
STEP999 : SEND EMAIL  01:06:21
******************************************************
Error Check Return Code:  0

******************************************************
*** SUCCESS:  mvm_etl.sh HAS COMPLETED SUCCESSFULLY! ***
******************************************************
******************************************************
*** SUCCESS:  mvm_etl.sh HAS COMPLETED SUCCESSFULLY! ***
******************************************************
root@8297f9d110d8:/z325719dir/SEER_NCI/log#






 
 
 
 root@8297f9d110d8:/z325719dir/SEER_NCI/ksh# ./mvm_etl.sh
Setting ENV variables
**** Log File name /root/z325719dir/SEER_NCI/log/mvm_etl.sh.05022023-001626     ***
**** Home Location /root     ***
**** Shell Script name mvm_etl.sh   ***
/root/z325719dir/SEER_NCI/log/mvm_etl.sh.05022023-001626
touch: cannot touch '/root/z325719dir/SEER_NCI/log/mvm_etl.sh.05022023-001626': No such file or directory
tee: /root/z325719dir/SEER_NCI/log/mvm_etl.sh.05022023-001626: No such file or directory
tee: /root/z325719dir/SEER_NCI/log/mvm_etl.sh.05022023-001626: No such file or directory

tee: /root/z325719dir/SEER_NCI/log/mvm_etl.sh.05022023-001626: No such file or directory
***************************************************
tee: /root/z325719dir/SEER_NCI/log/mvm_etl.sh.05022023-001626: No such file or directory
STEP010 :  SCP Get Step with Checksum:  00:16:26
tee: /root/z325719dir/SEER_NCI/log/mvm_etl.sh.05022023-001626: No such file or directory
************************************ ***************
mvm_etl.sh:STEP010 : No such file or directory or Not able to access (/CVSWINDOWNET/sFTP_Data/Prod/IDW/Seer_CVS_PharmacyDrug_202301_TAG_0.txt)
mvm_etl.sh:STEP010 : No such file or directory or Not able to access (/CVSWINDOWNET/sFTP_Data/Prod/IDW/SEER_CVS_PharmacyDrug_202301_0.txt)
./mvm_etl.sh: line 145: SEER_CVS_PharmacyDrug_202301: command not found
./mvm_etl.sh: line 146: ssh: command not found
Usage: grep [OPTION]... PATTERNS [FILE]...
Try 'grep --help' for more information.
tee: /root/z325719dir/SEER_NCI/log/mvm_etl.sh.05022023-001626: No such file or directory
Alert: No Retail Files is available to copy from the remote server./CVSWINDOWNET/sFTP_Data/Prod/IDW
******************************************************
 STEP010 : JOB  job_mvm_ims_elt_extract  downloading from Windows network Retail file(s)  : 00:16:26
******************************************************
/z325719dir/SEER_NCI/util/env/env_mvm: line 71: parameter_check: command not found
Error Check Return Code:  0
grep: /root/z325719dir/SEER_NCI/log/mvm_etl.sh.05022023-001626: No such file or directory******************************************************
STEP999 : SEND EMAIL  00:16:26
******************************************************
/z325719dir/SEER_NCI/util/env/env_mvm: line 71: parameter_check: command not found
Error Check Return Code:  0
grep: /root/z325719dir/SEER_NCI/log/mvm_etl.sh.05022023-001626: No such file or directory
******************************************************
*** SUCCESS:  mvm_etl.sh HAS COMPLETED SUCCESSFULLY! ***
******************************************************

tee: /root/z325719dir/SEER_NCI/log/mvm_etl.sh.05022023-001626: No such file or directory
******************************************************
tee: /root/z325719dir/SEER_NCI/log/mvm_etl.sh.05022023-001626: No such file or directory
*** SUCCESS:  mvm_etl.sh HAS COMPLETED SUCCESSFULLY! ***
tee: /root/z325719dir/SEER_NCI/log/mvm_etl.sh.05022023-001626: No such file or directory
******************************************************
root@8297f9d110d8:/z325719dir/SEER_NCI/ksh#











 
root@8297f9d110d8:/z325719dir/SEER_NCI/ksh# ./mvm_etl.sh
./mvm_etl.sh: line 45: /root/z325719dir/SEER_NCI/util/env/env_mvm: No such file or directory
./mvm_etl.sh: line 54: SRC_WIN_NET_USR: command not found
./mvm_etl.sh: line 55: SRC_WIN_NET_SERVER_NM: command not found
./mvm_etl.sh: line 60: /root/z325719dir/SEER_NCI/RETAIL_MONTHLY_INCREMENTAL_DATA: No such file or directory
./mvm_etl.sh: line 64: /root/z325719dir/SEER_NCI/SEER-NCI-MONTHLY_DATA_RELESE: No such file or directory
**** Log File name ***
**** Home Location /root***
**** Shell Script name mvm_etl.sh***
touch: missing file operand
Try 'touch --help' for more information.
./mvm_etl.sh: line 94: Current: command not found
date: invalid date '-15 last month'
./mvm_etl.sh: line 133: chk_file_exists: command not found
./mvm_etl.sh: line 134: chk_file_exists: command not found
./mvm_etl.sh: line 135: SEER_CVS_PharmacyDrug_: command not found
./mvm_etl.sh: line 136: ssh: command not found
Usage: grep [OPTION]... PATTERNS [FILE]...
Try 'grep --help' for more information.
Alert: No Retail Files is available to copy from the remote server.
******************************************************
 STEP010 : JOB  job_mvm_ims_elt_extract  downloading from Windows network Retail file(s)  : 23:51:05
******************************************************
./mvm_etl.sh: line 201: err_chk: command not found
******************************************************
STEP999 : SEND EMAIL  23:51:05
******************************************************
./mvm_etl.sh: line 214: err_chk: command not found

******************************************************
*** SUCCESS:  mvm_etl.sh HAS COMPLETED SUCCESSFULLY! ***
******************************************************




/z325719dir/SEER_NCI/ksh

/z325719dir/SEER_NCI/util/env

util/env/env_mvm

root@8297f9d110d8:/z325719dir#
C:\UNIX\MyUNIXwork\centosOS_Docker\Retailfiles




$ export NAME=Value
or
$ set NAME=Value
  echo $name
  Value -- output
  
  
  x = 15
After setting the value, export the variable:
export x
Print the value of the variable using the echo command or printenv:
printenv x
or
echo $x
  
  
   y=`date + "%y"`
	m=`date + "%m"`
	pm=$((m-1))
	ly=$((y-1))
	if [$pm -lt 10] #less than
	then
	   pm=0$pm
	fi
	if [$pm==00]
	then
	   pm=12
	fi    
	if [$pm==12] 
	then
	tcyymm=$ly$pm
	else
	tcyymm=$y$pm
	fi
	
GV_MONTH_YEAR=`date -d "1 month ago" +'%Y-%m'`
	echo $GV_MONTH_YEAR #2023-01	
	GV_MONTH=`date -d "$GV_MONTH_YEAR-15 last month" '+%Y%m'` #202212	

#GV_MONTH_YEAR=`date "+%m"` # Current month like 202301
	#GV_MONTH_YEAR=$((GV_MONTH_YEAR-1))# Prevous month like 202212
	#GV_MONTH_YEAR=`date -d "1 month ago" +'%m'`
	
    
	
	#date --date="$(date +%Y-%m-15) - 1 month" "+%Y%m"
	
	

	
	
  
#RETAIL DATA

SRC_WIN_NET_DIR = CCI\sFTP_data\Prod #RETAIL DATA-Source#windows network dir
SRC_WIN_NET_USR = 
SRC_WIN_NET_PWD = 

#ano_ops SAS/UNIX Machine for RETAIL FILES
TRG_UNIX_DIR_RETAIL= $GV_HOME/z325719dir/SEER_NCI/RETAIL_MONTHLY_INCREMENTAL_DATA

#ano_ops SAS/UNIX Machine for IMS-INC TWO FILES
TRG_UNIX_DIR_IMS_NCI= $GV_HOME/z325719dir/SEER_NCI/SEER-NCI-MONTHLY_DATA_RELESE



LOG=$GV_HOME/z325719dir/SEER_NCI/log
# all ksh scripts stored in /ano_ops/z325719dir/SEER_NCI/ksh

# General
Var_time=`date "+%d%m%Y-%H%M%S"`
Var_Year=`date +"%Y"`
Var_Month=`date +"%m"`
Var_Day=`date +"%d"`
LOGname=$LOG/$KSHname.$Var_time
export Var_time LOGname



Advanced Bash-Scripting Guide:
Prev		Next
Chapter 15. Internal Commands and Builtins
A builtin is a command contained within the Bash tool set, literally built in. This is either for performance reasons -- builtins execute faster than external commands, which usually require forking off [1] a separate process -- or because a particular builtin needs direct access to the shell internals.


When a command or the shell itself initiates (or spawns) a new subprocess to carry out a task, this is called forking. This new process is the child, and the process that forked it off is the parent. While the child process is doing its work, the parent process is still executing.

Note that while a parent process gets the process ID of the child process, and can thus pass arguments to it, the reverse is not true. This can create problems that are subtle and hard to track down.

Example 15-1. A script that spawns multiple instances of itself

#!/bin/bash
# spawn.sh


PIDS=$(pidof sh $0)  # Process IDs of the various instances of this script.
P_array=( $PIDS )    # Put them in an array (why?).
echo $PIDS           # Show process IDs of parent and child processes.
let "instances = ${#P_array[*]} - 1"  # Count elements, less 1.
                                      # Why subtract 1?
echo "$instances instance(s) of this script running."
echo "[Hit Ctl-C to exit.]"; echo


sleep 1              # Wait.
sh $0                # Play it again, Sam.

exit 0               # Not necessary; script will never get to here.
                     # Why not?

#  After exiting with a Ctl-C,
#+ do all the spawned instances of the script die?
#  If so, why?

# Note:
# ----
# Be careful not to run this script too long.
# It will eventually eat up too many system resources.

#  Is having a script spawn multiple instances of itself
#+ an advisable scripting technique.
#  Why or why not?

Generally, a Bash builtin does not fork a subprocess when it executes within a script. An external system command or filter in a script usually will fork a subprocess.

A builtin may be a synonym to a system command of the same name, but Bash reimplements it internally. For example, the Bash echo command is not the same as /bin/echo, although their behavior is almost identical.
#!/bin/bash

echo "This line uses the \"echo\" builtin."
/bin/echo "This line uses the /bin/echo system command."
A keyword is a reserved word, token or operator. Keywords have a special meaning to the shell, and indeed are the building blocks of the shell's syntax. As examples, for, while, do, and ! are keywords. Similar to a builtin, a keyword is hard-coded into Bash, but unlike a builtin, a keyword is not in itself a command, but a subunit of a command construct. [2]

I/O

echo
prints (to stdout) an expression or variable (see Example 4-1).
echo Hello
echo $a

An echo requires the -e option to print escaped characters. See Example 5-2.

Normally, each echo command prints a terminal newline, but the -n option suppresses this.


Note	
An echo can be used to feed a sequence of commands down a pipe.

if echo "$VAR" | grep -q txt   # if [[ $VAR = *txt* ]]
then
  echo "$VAR contains the substring sequence \"txt\""
fi


Note	
An echo, in combination with command substitution can set a variable.

a=`echo "HELLO" | tr A-Z a-z`

See also Example 16-22, Example 16-3, Example 16-47, and Example 16-48.

Be aware that echo `command` deletes any linefeeds that the output of command generates.

The $IFS (internal field separator) variable normally contains \n (linefeed) as one of its set of whitespace characters. Bash therefore splits the output of command at linefeeds into arguments to echo. Then echo outputs these arguments, separated by spaces.

bash$ ls -l /usr/share/apps/kjezz/sounds
-rw-r--r--    1 root     root         1407 Nov  7  2000 reflect.au
 -rw-r--r--    1 root     root          362 Nov  7  2000 seconds.au




bash$ echo `ls -l /usr/share/apps/kjezz/sounds`
total 40 -rw-r--r-- 1 root root 716 Nov 7 2000 reflect.au -rw-r--r-- 1 root root ...
	      
So, how can we embed a linefeed within an echoed character string?
# Embedding a linefeed?
echo "Why doesn't this string \n split on two lines?"
# Doesn't split.

# Let's try something else.

echo
	     
echo $"A line of text containing
a linefeed."
# Prints as two distinct lines (embedded linefeed).
# But, is the "$" variable prefix really necessary?

echo

echo "This string splits
on two lines."
# No, the "$" is not needed.

echo
echo "---------------"
echo

echo -n $"Another line of text containing
a linefeed."
# Prints as two distinct lines (embedded linefeed).
# Even the -n option fails to suppress the linefeed here.

echo
echo
echo "---------------"
echo
echo

# However, the following doesn't work as expected.
# Why not? Hint: Assignment to a variable.
string1=$"Yet another line of text containing
a linefeed (maybe)."

echo $string1
# Yet another line of text containing a linefeed (maybe).
#                                    ^
# Linefeed becomes a space.

# Thanks, Steve Parker, for pointing this out.

Note	
This command is a shell builtin, and not the same as /bin/echo, although its behavior is similar.

bash$ type -a echo
echo is a shell builtin
 echo is /bin/echo
	      
printf
The printf, formatted print, command is an enhanced echo. It is a limited variant of the C language printf() library function, and its syntax is somewhat different.

printf format-string... parameter...

This is the Bash builtin version of the /bin/printf or /usr/bin/printf command. See the printf manpage (of the system command) for in-depth coverage.

Caution	
Older versions of Bash may not support printf.

Example 15-2. printf in action

#!/bin/bash
# printf demo

declare -r PI=3.14159265358979     # Read-only variable, i.e., a constant.
declare -r DecimalConstant=31373

Message1="Greetings,"
Message2="Earthling."

echo

printf "Pi to 2 decimal places = %1.2f" $PI
echo
printf "Pi to 9 decimal places = %1.9f" $PI  # It even rounds off correctly.

printf "\n"                                  # Prints a line feed,
                                             # Equivalent to 'echo' . . .

printf "Constant = \t%d\n" $DecimalConstant  # Inserts tab (\t).

printf "%s %s \n" $Message1 $Message2

echo

# ==========================================#
# Simulation of C function, sprintf().
# Loading a variable with a formatted string.

echo 

Pi12=$(printf "%1.12f" $PI)
echo "Pi to 12 decimal places = $Pi12"      # Roundoff error!

Msg=`printf "%s %s \n" $Message1 $Message2`
echo $Msg; echo $Msg

#  As it happens, the 'sprintf' function can now be accessed
#+ as a loadable module to Bash,
#+ but this is not portable.

exit 0
Formatting error messages is a useful application of printf

E_BADDIR=85

var=nonexistent_directory

error()
{
  printf "$@" >&2
  # Formats positional params passed, and sends them to stderr.
  echo
  exit $E_BADDIR
}

cd $var || error $"Can't cd to %s." "$var"

# Thanks, S.C.
See also Example 36-17.

read
"Reads" the value of a variable from stdin, that is, interactively fetches input from the keyboard. The -a option lets read get array variables (see Example 27-6).

Example 15-3. Variable assignment, using read

#!/bin/bash
# "Reading" variables.

echo -n "Enter the value of variable 'var1': "
# The -n option to echo suppresses newline.

read var1
# Note no '$' in front of var1, since it is being set.

echo "var1 = $var1"


echo

# A single 'read' statement can set multiple variables.
echo -n "Enter the values of variables 'var2' and 'var3' "
echo =n "(separated by a space or tab): "
read var2 var3
echo "var2 = $var2      var3 = $var3"
#  If you input only one value,
#+ the other variable(s) will remain unset (null).

exit 0
A read without an associated variable assigns its input to the dedicated variable $REPLY.

Example 15-4. What happens when read has no variable

#!/bin/bash
# read-novar.sh

echo

# -------------------------- #
echo -n "Enter a value: "
read var
echo "\"var\" = "$var""
# Everything as expected here.
# -------------------------- #

echo

# ------------------------------------------------------------------- #
echo -n "Enter another value: "
read           #  No variable supplied for 'read', therefore...
               #+ Input to 'read' assigned to default variable, $REPLY.
var="$REPLY"
echo "\"var\" = "$var""
# This is equivalent to the first code block.
# ------------------------------------------------------------------- #

echo
echo "========================="
echo


#  This example is similar to the "reply.sh" script.
#  However, this one shows that $REPLY is available
#+ even after a 'read' to a variable in the conventional way.


# ================================================================= #

#  In some instances, you might wish to discard the first value read.
#  In such cases, simply ignore the $REPLY variable.

{ # Code block.
read            # Line 1, to be discarded.
read line2      # Line 2, saved in variable.
  } <$0
echo "Line 2 of this script is:"
echo "$line2"   #   # read-novar.sh
echo            #   #!/bin/bash  line discarded.

# See also the soundcard-on.sh script.

exit 0
Normally, inputting a \ suppresses a newline during input to a read. The -r option causes an inputted \ to be interpreted literally.

Example 15-5. Multi-line input to read

#!/bin/bash

echo

echo "Enter a string terminated by a \\, then press <ENTER>."
echo "Then, enter a second string (no \\ this time), and again press <ENTER>."

read var1     # The "\" suppresses the newline, when reading $var1.
              #     first line \
              #     second line

echo "var1 = $var1"
#     var1 = first line second line

#  For each line terminated by a "\"
#+ you get a prompt on the next line to continue feeding characters into var1.

echo; echo

echo "Enter another string terminated by a \\ , then press <ENTER>."
read -r var2  # The -r option causes the "\" to be read literally.
              #     first line \

echo "var2 = $var2"
#     var2 = first line \

# Data entry terminates with the first <ENTER>.

echo 

exit 0

The read command has some interesting options that permit echoing a prompt and even reading keystrokes without hitting ENTER.

# Read a keypress without hitting ENTER.

read -s -n1 -p "Hit a key " keypress
echo; echo "Keypress was "\"$keypress\""."

# -s option means do not echo input.
# -n N option means accept only N characters of input.
# -p option means echo the following prompt before reading input.

# Using these options is tricky, since they need to be in the correct order.


The -n option to read also allows detection of the arrow keys and certain of the other unusual keys.

Example 15-6. Detecting the arrow keys

#!/bin/bash
# arrow-detect.sh: Detects the arrow keys, and a few more.
# Thank you, Sandro Magi, for showing me how.

# --------------------------------------------
# Character codes generated by the keypresses.
arrowup='\[A'
arrowdown='\[B'
arrowrt='\[C'
arrowleft='\[D'
insert='\[2'
delete='\[3'
# --------------------------------------------

SUCCESS=0
OTHER=65

echo -n "Press a key...  "
# May need to also press ENTER if a key not listed above pressed.
read -n3 key                      # Read 3 characters.

echo -n "$key" | grep "$arrowup"  #Check if character code detected.
if [ "$?" -eq $SUCCESS ]
then
  echo "Up-arrow key pressed."
  exit $SUCCESS
fi

echo -n "$key" | grep "$arrowdown"
if [ "$?" -eq $SUCCESS ]
then
  echo "Down-arrow key pressed."
  exit $SUCCESS
fi

echo -n "$key" | grep "$arrowrt"
if [ "$?" -eq $SUCCESS ]
then
  echo "Right-arrow key pressed."
  exit $SUCCESS
fi

echo -n "$key" | grep "$arrowleft"
if [ "$?" -eq $SUCCESS ]
then
  echo "Left-arrow key pressed."
  exit $SUCCESS
fi

echo -n "$key" | grep "$insert"
if [ "$?" -eq $SUCCESS ]
then
  echo "\"Insert\" key pressed."
  exit $SUCCESS
fi

echo -n "$key" | grep "$delete"
if [ "$?" -eq $SUCCESS ]
then
  echo "\"Delete\" key pressed."
  exit $SUCCESS
fi


echo " Some other key pressed."

exit $OTHER

# ========================================= #

#  Mark Alexander came up with a simplified
#+ version of the above script (Thank you!).
#  It eliminates the need for grep.

#!/bin/bash

  uparrow=$'\x1b[A'
  downarrow=$'\x1b[B'
  leftarrow=$'\x1b[D'
  rightarrow=$'\x1b[C'

  read -s -n3 -p "Hit an arrow key: " x

  case "$x" in
  $uparrow)
     echo "You pressed up-arrow"
     ;;
  $downarrow)
     echo "You pressed down-arrow"
     ;;
  $leftarrow)
     echo "You pressed left-arrow"
     ;;
  $rightarrow)
     echo "You pressed right-arrow"
     ;;
  esac

exit $?

# ========================================= #

# Antonio Macchi has a simpler alternative.

#!/bin/bash

while true
do
  read -sn1 a
  test "$a" == `echo -en "\e"` || continue
  read -sn1 a
  test "$a" == "[" || continue
  read -sn1 a
  case "$a" in
    A)  echo "up";;
    B)  echo "down";;
    C)  echo "right";;
    D)  echo "left";;
  esac
done

# ========================================= #

#  Exercise:
#  --------
#  1) Add detection of the "Home," "End," "PgUp," and "PgDn" keys.
Note	
The -n option to read will not detect the ENTER (newline) key.


The -t option to read permits timed input (see Example 9-4 and Example A-41).

The -u option takes the file descriptor of the target file.


The read command may also "read" its variable value from a file redirected to stdin. If the file contains more than one line, only the first line is assigned to the variable. If read has more than one parameter, then each of these variables gets assigned a successive whitespace-delineated string. Caution!

Example 15-7. Using read with file redirection

#!/bin/bash

read var1 <data-file
echo "var1 = $var1"
# var1 set to the entire first line of the input file "data-file"

read var2 var3 <data-file
echo "var2 = $var2   var3 = $var3"
# Note non-intuitive behavior of "read" here.
# 1) Rewinds back to the beginning of input file.
# 2) Each variable is now set to a corresponding string,
#    separated by whitespace, rather than to an entire line of text.
# 3) The final variable gets the remainder of the line.
# 4) If there are more variables to be set than whitespace-terminated strings
#    on the first line of the file, then the excess variables remain empty.

echo "------------------------------------------------"

# How to resolve the above problem with a loop:
while read line
do
  echo "$line"
done <data-file
# Thanks, Heiner Steven for pointing this out.

echo "------------------------------------------------"

# Use $IFS (Internal Field Separator variable) to split a line of input to
# "read", if you do not want the default to be whitespace.

echo "List of all users:"
OIFS=$IFS; IFS=:       # /etc/passwd uses ":" for field separator.
while read name passwd uid gid fullname ignore
do
  echo "$name ($fullname)"
done </etc/passwd   # I/O redirection.
IFS=$OIFS              # Restore original $IFS.
# This code snippet also by Heiner Steven.



#  Setting the $IFS variable within the loop itself
#+ eliminates the need for storing the original $IFS
#+ in a temporary variable.
#  Thanks, Dim Segebart, for pointing this out.
echo "------------------------------------------------"
echo "List of all users:"

while IFS=: read name passwd uid gid fullname ignore
do
  echo "$name ($fullname)"
done </etc/passwd   # I/O redirection.

echo
echo "\$IFS still $IFS"

exit 0
Note	

Piping output to a read, using echo to set variables will fail.

Yet, piping the output of cat seems to work.


cat file1 file2 |
while read line
do
echo $line
done

However, as Bjön Eriksson shows:

Example 15-8. Problems reading from a pipe

#!/bin/sh
# readpipe.sh
# This example contributed by Bjon Eriksson.

### shopt -s lastpipe

last="(null)"
cat $0 |
while read line
do
    echo "{$line}"
    last=$line
done

echo
echo "++++++++++++++++++++++"
printf "\nAll done, last: $last\n" #  The output of this line
                                   #+ changes if you uncomment line 5.
                                   #  (Bash, version -ge 4.2 required.)

exit 0  # End of code.
        # (Partial) output of script follows.
        # The 'echo' supplies extra brackets.

#############################################

./readpipe.sh 

{#!/bin/sh}
{last="(null)"}
{cat $0 |}
{while read line}
{do}
{echo "{$line}"}
{last=$line}
{done}
{printf "nAll done, last: $lastn"}


All done, last: (null)

The variable (last) is set within the loop/subshell
but its value does not persist outside the loop.
The gendiff script, usually found in /usr/bin on many Linux distros, pipes the output of find to a while read construct.
find $1 \( -name "*$2" -o -name ".*$2" \) -print |
while read f; do
. . .
Tip	
It is possible to paste text into the input field of a read (but not multiple lines!). See Example A-38.

Filesystem

cd
The familiar cd change directory command finds use in scripts where execution of a command requires being in a specified directory.

(cd /source/directory && tar cf - . ) | (cd /dest/directory && tar xpvf -)
[from the previously cited example by Alan Cox]

The -P (physical) option to cd causes it to ignore symbolic links.

cd - changes to $OLDPWD, the previous working directory.


Caution	
The cd command does not function as expected when presented with two forward slashes.
bash$ cd //
bash$ pwd
//
	      
The output should, of course, be /. This is a problem both from the command-line and in a script.

pwd
Print Working Directory. This gives the user's (or script's) current directory (see Example 15-9). The effect is identical to reading the value of the builtin variable $PWD.

pushd, popd, dirs
This command set is a mechanism for bookmarking working directories, a means of moving back and forth through directories in an orderly manner. A pushdown stack is used to keep track of directory names. Options allow various manipulations of the directory stack.

pushd dir-name pushes the path dir-name onto the directory stack (to the top of the stack) and simultaneously changes the current working directory to dir-name

popd removes (pops) the top directory path name off the directory stack and simultaneously changes the current working directory to the directory now at the top of the stack.

dirs lists the contents of the directory stack (compare this with the $DIRSTACK variable). A successful pushd or popd will automatically invoke dirs.

Scripts that require various changes to the current working directory without hard-coding the directory name changes can make good use of these commands. Note that the implicit $DIRSTACK array variable, accessible from within a script, holds the contents of the directory stack.

Example 15-9. Changing the current working directory

#!/bin/bash

dir1=/usr/local
dir2=/var/spool

pushd $dir1
# Will do an automatic 'dirs' (list directory stack to stdout).
echo "Now in directory `pwd`." # Uses back-quoted 'pwd'.

# Now, do some stuff in directory 'dir1'.
pushd $dir2
echo "Now in directory `pwd`."

# Now, do some stuff in directory 'dir2'.
echo "The top entry in the DIRSTACK array is $DIRSTACK."
popd
echo "Now back in directory `pwd`."

# Now, do some more stuff in directory 'dir1'.
popd
echo "Now back in original working directory `pwd`."

exit 0

# What happens if you don't 'popd' -- then exit the script?
# Which directory do you end up in? Why?
Variables

let
The let command carries out arithmetic operations on variables. [3] In many cases, it functions as a less complex version of expr.

Example 15-10. Letting let do arithmetic.

#!/bin/bash

echo

let a=11            # Same as 'a=11'
let a=a+5           # Equivalent to  let "a = a + 5"
                    # (Double quotes and spaces make it more readable.)
echo "11 + 5 = $a"  # 16

let "a <<= 3"       # Equivalent to  let "a = a << 3"
echo "\"\$a\" (=16) left-shifted 3 places = $a"
                    # 128

let "a /= 4"        # Equivalent to  let "a = a / 4"
echo "128 / 4 = $a" # 32

let "a -= 5"        # Equivalent to  let "a = a - 5"
echo "32 - 5 = $a"  # 27

let "a *=  10"      # Equivalent to  let "a = a * 10"
echo "27 * 10 = $a" # 270

let "a %= 8"        # Equivalent to  let "a = a % 8"
echo "270 modulo 8 = $a  (270 / 8 = 33, remainder $a)"
                    # 6


# Does "let" permit C-style operators?
# Yes, just as the (( ... )) double-parentheses construct does.

let a++             # C-style (post) increment.
echo "6++ = $a"     # 6++ = 7
let a--             # C-style decrement.
echo "7-- = $a"     # 7-- = 6
# Of course, ++a, etc., also allowed . . .
echo


# Trinary operator.

# Note that $a is 6, see above.
let "t = a<7?7:11"   # True
echo $t  # 7

let a++
let "t = a<7?7:11"   # False
echo $t  #     11

exit

Caution	
The let command can, in certain contexts, return a surprising exit status.

# Evgeniy Ivanov points out:

var=0
echo $?     # 0
            # As expected.

let var++
echo $?     # 1
            # The command was successful, so why isn't $?=0 ???
            # Anomaly!

let var++
echo $?     # 0
            # As expected.


# Likewise . . .

let var=0
echo $?     # 1
            # The command was successful, so why isn't $?=0 ???

#  However, as Jeff Gorak points out,
#+ this is part of the design spec for 'let' . . .
# "If the last ARG evaluates to 0, let returns 1;
#  let returns 0 otherwise." ['help let']

eval
eval arg1 [arg2] ... [argN]

Combines the arguments in an expression or list of expressions and evaluates them. Any variables within the expression are expanded. The net result is to convert a string into a command.

Tip	
The eval command can be used for code generation from the command-line or within a script.

bash$ command_string="ps ax"
bash$ process="ps ax"
bash$ eval "$command_string" | grep "$process"
26973 pts/3    R+     0:00 grep --color ps ax
 26974 pts/3    R+     0:00 ps ax
	      

Each invocation of eval forces a re-evaluation of its arguments.
a='$b'
b='$c'
c=d

echo $a             # $b
                    # First level.
eval echo $a        # $c
                    # Second level.
eval eval echo $a   # d
                    # Third level.

# Thank you, E. Choroba.


Example 15-11. Showing the effect of eval

#!/bin/bash
# Exercising "eval" ...

y=`eval ls -l`  #  Similar to y=`ls -l`
echo $y         #+ but linefeeds removed because "echoed" variable is unquoted.
echo
echo "$y"       #  Linefeeds preserved when variable is quoted.

echo; echo

y=`eval df`     #  Similar to y=`df`
echo $y         #+ but linefeeds removed.

#  When LF's not preserved, it may make it easier to parse output,
#+ using utilities such as "awk".

echo
echo "==========================================================="
echo

eval "`seq 3 | sed -e 's/.*/echo var&=ABCDEFGHIJ/'`"
# var1=ABCDEFGHIJ
# var2=ABCDEFGHIJ
# var3=ABCDEFGHIJ

echo
echo "==========================================================="
echo


# Now, showing how to do something useful with "eval" . . .
# (Thank you, E. Choroba!)

version=3.4     #  Can we split the version into major and minor
                #+ part in one command?
echo "version = $version"
eval major=${version/./;minor=}     #  Replaces '.' in version by ';minor='
                                    #  The substitution yields '3; minor=4'
                                    #+ so eval does minor=4, major=3
echo Major: $major, minor: $minor   #  Major: 3, minor: 4

Example 15-12. Using eval to select among variables

#!/bin/bash
# arr-choice.sh

#  Passing arguments to a function to select
#+ one particular variable out of a group.

arr0=( 10 11 12 13 14 15 )
arr1=( 20 21 22 23 24 25 )
arr2=( 30 31 32 33 34 35 )
#       0  1  2  3  4  5      Element number (zero-indexed)


choose_array ()
{
  eval array_member=\${arr${array_number}[element_number]}
  #                 ^       ^^^^^^^^^^^^
  #  Using eval to construct the name of a variable,
  #+ in this particular case, an array name.

  echo "Element $element_number of array $array_number is $array_member"
} #  Function can be rewritten to take parameters.

array_number=0    # First array.
element_number=3
choose_array      # 13

array_number=2    # Third array.
element_number=4
choose_array      # 34

array_number=3    # Null array (arr3 not allocated).
element_number=4
choose_array      # (null)

# Thank you, Antonio Macchi, for pointing this out.
Example 15-13. Echoing the command-line parameters

#!/bin/bash
# echo-params.sh

# Call this script with a few command-line parameters.
# For example:
#     sh echo-params.sh first second third fourth fifth

params=$#              # Number of command-line parameters.
param=1                # Start at first command-line param.

while [ "$param" -le "$params" ]
do
  echo -n "Command-line parameter "
  echo -n \$$param     #  Gives only the *name* of variable.
#         ^^^          #  $1, $2, $3, etc.
                       #  Why?
                       #  \$ escapes the first "$"
                       #+ so it echoes literally,
                       #+ and $param dereferences "$param" . . .
                       #+ . . . as expected.
  echo -n " = "
  eval echo \$$param   #  Gives the *value* of variable.
# ^^^^      ^^^        #  The "eval" forces the *evaluation*
                       #+ of \$$
                       #+ as an indirect variable reference.

(( param ++ ))         # On to the next.
done

exit $?

# =================================================

$ sh echo-params.sh first second third fourth fifth
Command-line parameter $1 = first
Command-line parameter $2 = second
Command-line parameter $3 = third
Command-line parameter $4 = fourth
Command-line parameter $5 = fifth
Example 15-14. Forcing a log-off

#!/bin/bash
# Killing ppp to force a log-off.
# For dialup connection, of course.

# Script should be run as root user.

SERPORT=ttyS3
#  Depending on the hardware and even the kernel version,
#+ the modem port on your machine may be different --
#+ /dev/ttyS1 or /dev/ttyS2.


killppp="eval kill -9 `ps ax | awk '/ppp/ { print $1 }'`"
#                     -------- process ID of ppp -------  

$killppp                     # This variable is now a command.


# The following operations must be done as root user.

chmod 666 /dev/$SERPORT      # Restore r+w permissions, or else what?
#  Since doing a SIGKILL on ppp changed the permissions on the serial port,
#+ we restore permissions to previous state.

rm /var/lock/LCK..$SERPORT   # Remove the serial port lock file. Why?

exit $?

# Exercises:
# ---------
# 1) Have script check whether root user is invoking it.
# 2) Do a check on whether the process to be killed
#+   is actually running before attempting to kill it.   
# 3) Write an alternate version of this script based on 'fuser':
#+      if [ fuser -s /dev/modem ]; then . . .
Example 15-15. A version of rot13

#!/bin/bash
# A version of "rot13" using 'eval'.
# Compare to "rot13.sh" example.

setvar_rot_13()              # "rot13" scrambling
{
  local varname=$1 varvalue=$2
  eval $varname='$(echo "$varvalue" | tr a-z n-za-m)'
}


setvar_rot_13 var "foobar"   # Run "foobar" through rot13.
echo $var                    # sbbone

setvar_rot_13 var "$var"     # Run "sbbone" through rot13.
                             # Back to original variable.
echo $var                    # foobar

# This example by Stephane Chazelas.
# Modified by document author.

exit 0
Here is another example of using eval to evaluate a complex expression, this one from an earlier version of YongYe's Tetris game script.

eval ${1}+=\"${x} ${y} \"
Example A-53 uses eval to convert array elements into a command list.

The eval command occurs in the older version of indirect referencing.
eval var=\$$var
Tip	
The eval command can be used to parameterize brace expansion.


Caution	
The eval command can be risky, and normally should be avoided when there exists a reasonable alternative. An eval $COMMANDS executes the contents of COMMANDS, which may contain such unpleasant surprises as rm -rf *. Running an eval on unfamiliar code written by persons unknown is living dangerously.

set
The set command changes the value of internal script variables/options. One use for this is to toggle option flags which help determine the behavior of the script. Another application for it is to reset the positional parameters that a script sees as the result of a command (set `command`). The script can then parse the fields of the command output.

Example 15-16. Using set with positional parameters

#!/bin/bash
# ex34.sh
# Script "set-test"

# Invoke this script with three command-line parameters,
# for example, "sh ex34.sh one two three".

echo
echo "Positional parameters before  set \`uname -a\` :"
echo "Command-line argument #1 = $1"
echo "Command-line argument #2 = $2"
echo "Command-line argument #3 = $3"


set `uname -a` # Sets the positional parameters to the output
               # of the command `uname -a`

echo
echo +++++
echo $_        # +++++
# Flags set in script.
echo $-        # hB
#                Anomalous behavior?
echo

echo "Positional parameters after  set \`uname -a\` :"
# $1, $2, $3, etc. reinitialized to result of `uname -a`
echo "Field #1 of 'uname -a' = $1"
echo "Field #2 of 'uname -a' = $2"
echo "Field #3 of 'uname -a' = $3"
echo \#\#\#
echo $_        # ###
echo

exit 0
More fun with positional parameters.

Example 15-17. Reversing the positional parameters

#!/bin/bash
# revposparams.sh: Reverse positional parameters.
# Script by Dan Jacobson, with stylistic revisions by document author.


set a\ b c d\ e;
#     ^      ^     Spaces escaped 
#       ^ ^        Spaces not escaped
OIFS=$IFS; IFS=:;
#              ^   Saving old IFS and setting new one.

echo

until [ $# -eq 0 ]
do          #      Step through positional parameters.
  echo "### k0 = "$k""     # Before
  k=$1:$k;  #      Append each pos param to loop variable.
#     ^
  echo "### k = "$k""      # After
  echo
  shift;
done

set $k  #  Set new positional parameters.
echo -
echo $# #  Count of positional parameters.
echo -
echo

for i   #  Omitting the "in list" sets the variable -- i --
        #+ to the positional parameters.
do
  echo $i  # Display new positional parameters.
done

IFS=$OIFS  # Restore IFS.

#  Question:
#  Is it necessary to set an new IFS, internal field separator,
#+ in order for this script to work properly?
#  What happens if you don't? Try it.
#  And, why use the new IFS -- a colon -- in line 17,
#+ to append to the loop variable?
#  What is the purpose of this?

exit 0

$ ./revposparams.sh

### k0 = 
### k = a b

### k0 = a b
### k = c a b

### k0 = c a b
### k = d e c a b

-
3
-

d e
c
a b
Invoking set without any options or arguments simply lists all the environmental and other variables that have been initialized.

bash$ set
AUTHORCOPY=/home/bozo/posts
 BASH=/bin/bash
 BASH_VERSION=$'2.05.8(1)-release'
 ...
 XAUTHORITY=/home/bozo/.Xauthority
 _=/etc/bashrc
 variable22=abc
 variable23=xzy
	      
Using set with the -- option explicitly assigns the contents of a variable to the positional parameters. If no variable follows the -- it unsets the positional parameters.

Example 15-18. Reassigning the positional parameters

#!/bin/bash

variable="one two three four five"

set -- $variable
# Sets positional parameters to the contents of "$variable".

first_param=$1
second_param=$2
shift; shift        # Shift past first two positional params.
# shift 2             also works.
remaining_params="$*"

echo
echo "first parameter = $first_param"             # one
echo "second parameter = $second_param"           # two
echo "remaining parameters = $remaining_params"   # three four five

echo; echo

# Again.
set -- $variable
first_param=$1
second_param=$2
echo "first parameter = $first_param"             # one
echo "second parameter = $second_param"           # two

# ======================================================

set --
# Unsets positional parameters if no variable specified.

first_param=$1
second_param=$2
echo "first parameter = $first_param"             # (null value)
echo "second parameter = $second_param"           # (null value)

exit 0
See also Example 11-2 and Example 16-56.

unset
The unset command deletes a shell variable, effectively setting it to null. Note that this command does not affect positional parameters.

bash$ unset PATH

bash$ echo $PATH

bash$ 
Example 15-19. "Unsetting" a variable

#!/bin/bash
# unset.sh: Unsetting a variable.

variable=hello                       #  Initialized.
echo "variable = $variable"

unset variable                       #  Unset.
                                     #  In this particular context,
                                     #+ same effect as:   variable=
echo "(unset) variable = $variable"  #  $variable is null.

if [ -z "$variable" ]                #  Try a string-length test.
then
  echo "\$variable has zero length."
fi

exit 0
Note	
In most contexts, an undeclared variable and one that has been unset are equivalent. However, the ${parameter:-default} parameter substitution construct can distinguish between the two.

export

The export [4] command makes available variables to all child processes of the running script or shell. One important use of the export command is in startup files, to initialize and make accessible environmental variables to subsequent user processes.

Caution	
Unfortunately, there is no way to export variables back to the parent process, to the process that called or invoked the script or shell.


Example 15-20. Using export to pass a variable to an embedded awk script

#!/bin/bash

#  Yet another version of the "column totaler" script (col-totaler.sh)
#+ that adds up a specified column (of numbers) in the target file.
#  This uses the environment to pass a script variable to 'awk' . . .
#+ and places the awk script in a variable.


ARGS=2
E_WRONGARGS=85

if [ $# -ne "$ARGS" ] # Check for proper number of command-line args.
then
   echo "Usage: `basename $0` filename column-number"
   exit $E_WRONGARGS
fi

filename=$1
column_number=$2

#===== Same as original script, up to this point =====#

export column_number
# Export column number to environment, so it's available for retrieval.


# -----------------------------------------------
awkscript='{ total += $ENVIRON["column_number"] }
END { print total }'
# Yes, a variable can hold an awk script.
# -----------------------------------------------

# Now, run the awk script.
awk "$awkscript" "$filename"

# Thanks, Stephane Chazelas.

exit 0
Tip	
It is possible to initialize and export variables in the same operation, as in export var1=xxx.

However, as Greg Keraunen points out, in certain situations this may have a different effect than setting a variable, then exporting it.

bash$ export var=(a b); echo ${var[0]}
(a b)



bash$ var=(a b); export var; echo ${var[0]}
a
	      
Note	
A variable to be exported may require special treatment. See Example M-2.

declare, typeset
The declare and typeset commands specify and/or restrict properties of variables.

readonly
Same as declare -r, sets a variable as read-only, or, in effect, as a constant. Attempts to change the variable fail with an error message. This is the shell analog of the C language const type qualifier.

getopts
This powerful tool parses command-line arguments passed to the script. This is the Bash analog of the getopt external command and the getopt library function familiar to C programmers. It permits passing and concatenating multiple options [5] and associated arguments to a script (for example scriptname -abc -e /usr/local).


The getopts construct uses two implicit variables. $OPTIND is the argument pointer (OPTion INDex) and $OPTARG (OPTion ARGument) the (optional) argument attached to an option. A colon following the option name in the declaration tags that option as having an associated argument.

A getopts construct usually comes packaged in a while loop, which processes the options and arguments one at a time, then increments the implicit $OPTIND variable to point to the next.

Note	
The arguments passed from the command-line to the script must be preceded by a dash (-). It is the prefixed - that lets getopts recognize command-line arguments as options. In fact, getopts will not process arguments without the prefixed -, and will terminate option processing at the first argument encountered lacking them.

The getopts template differs slightly from the standard while loop, in that it lacks condition brackets.

The getopts construct is a highly functional replacement for the traditional getopt external command.

while getopts ":abcde:fg" Option
# Initial declaration.
# a, b, c, d, e, f, and g are the options (flags) expected.
# The : after option 'e' shows it will have an argument passed with it.
do
  case $Option in
    a ) # Do something with variable 'a'.
    b ) # Do something with variable 'b'.
    ...
    e)  # Do something with 'e', and also with $OPTARG,
        # which is the associated argument passed with option 'e'.
    ...
    g ) # Do something with variable 'g'.
  esac
done
shift $(($OPTIND - 1))
# Move argument pointer to next.

# All this is not nearly as complicated as it looks <grin>.

Example 15-21. Using getopts to read the options/arguments passed to a script

#!/bin/bash
# ex33.sh: Exercising getopts and OPTIND
#          Script modified 10/09/03 at the suggestion of Bill Gradwohl.


# Here we observe how 'getopts' processes command-line arguments to script.
# The arguments are parsed as "options" (flags) and associated arguments.

# Try invoking this script with:
#   'scriptname -mn'
#   'scriptname -oq qOption' (qOption can be some arbitrary string.)
#   'scriptname -qXXX -r'
#
#   'scriptname -qr'
#+      - Unexpected result, takes "r" as the argument to option "q"
#   'scriptname -q -r' 
#+      - Unexpected result, same as above
#   'scriptname -mnop -mnop'  - Unexpected result
#   (OPTIND is unreliable at stating where an option came from.)
#
#  If an option expects an argument ("flag:"), then it will grab
#+ whatever is next on the command-line.

NO_ARGS=0 
E_OPTERROR=85

if [ $# -eq "$NO_ARGS" ]    # Script invoked with no command-line args?
then
  echo "Usage: `basename $0` options (-mnopqrs)"
  exit $E_OPTERROR          # Exit and explain usage.
                            # Usage: scriptname -options
                            # Note: dash (-) necessary
fi  


while getopts ":mnopq:rs" Option
do
  case $Option in
    m     ) echo "Scenario #1: option -m-   [OPTIND=${OPTIND}]";;
    n | o ) echo "Scenario #2: option -$Option-   [OPTIND=${OPTIND}]";;
    p     ) echo "Scenario #3: option -p-   [OPTIND=${OPTIND}]";;
    q     ) echo "Scenario #4: option -q-\
                  with argument \"$OPTARG\"   [OPTIND=${OPTIND}]";;
    #  Note that option 'q' must have an associated argument,
    #+ otherwise it falls through to the default.
    r | s ) echo "Scenario #5: option -$Option-";;
    *     ) echo "Unimplemented option chosen.";;   # Default.
  esac
done

shift $(($OPTIND - 1))
#  Decrements the argument pointer so it points to next argument.
#  $1 now references the first non-option item supplied on the command-line
#+ if one exists.

exit $?

#   As Bill Gradwohl states,
#  "The getopts mechanism allows one to specify:  scriptname -mnop -mnop
#+  but there is no reliable way to differentiate what came
#+ from where by using OPTIND."
#  There are, however, workarounds.
Script Behavior

source, . (dot command)
This command, when invoked from the command-line, executes a script. Within a script, a source file-name loads the file file-name. Sourcing a file (dot-command) imports code into the script, appending to the script (same effect as the #include directive in a C program). The net result is the same as if the "sourced" lines of code were physically present in the body of the script. This is useful in situations when multiple scripts use a common data file or function library.

Example 15-22. "Including" a data file

#!/bin/bash
#  Note that this example must be invoked with bash, i.e., bash ex38.sh
#+ not  sh ex38.sh !

. data-file    # Load a data file.
# Same effect as "source data-file", but more portable.

#  The file "data-file" must be present in current working directory,
#+ since it is referred to by its basename.

# Now, let's reference some data from that file.

echo "variable1 (from data-file) = $variable1"
echo "variable3 (from data-file) = $variable3"

let "sum = $variable2 + $variable4"
echo "Sum of variable2 + variable4 (from data-file) = $sum"
echo "message1 (from data-file) is \"$message1\""
#                                  Escaped quotes
echo "message2 (from data-file) is \"$message2\""

print_message This is the message-print function in the data-file.


exit $?
File data-file for Example 15-22, above. Must be present in same directory.

# This is a data file loaded by a script.
# Files of this type may contain variables, functions, etc.
# It loads with a 'source' or '.' command from a shell script.

# Let's initialize some variables.

variable1=23
variable2=474
variable3=5
variable4=97

message1="Greetings from *** line $LINENO *** of the data file!"
message2="Enough for now. Goodbye."

print_message ()
{   # Echoes any message passed to it.

  if [ -z "$1" ]
  then
    return 1 # Error, if argument missing.
  fi

  echo

  until [ -z "$1" ]
  do             # Step through arguments passed to function.
    echo -n "$1" # Echo args one at a time, suppressing line feeds.
    echo -n " "  # Insert spaces between words.
    shift        # Next one.
  done  

  echo

  return 0
}
If the sourced file is itself an executable script, then it will run, then return control to the script that called it. A sourced executable script may use a return for this purpose.


Arguments may be (optionally) passed to the sourced file as positional parameters.
source $filename $arg1 arg2
It is even possible for a script to source itself, though this does not seem to have any practical applications.

Example 15-23. A (useless) script that sources itself

#!/bin/bash
# self-source.sh: a script sourcing itself "recursively."
# From "Stupid Script Tricks," Volume II.

MAXPASSCNT=100    # Maximum number of execution passes.

echo -n  "$pass_count  "
#  At first execution pass, this just echoes two blank spaces,
#+ since $pass_count still uninitialized.

let "pass_count += 1"
#  Assumes the uninitialized variable $pass_count
#+ can be incremented the first time around.
#  This works with Bash and pdksh, but
#+ it relies on non-portable (and possibly dangerous) behavior.
#  Better would be to initialize $pass_count to 0 before incrementing.

while [ "$pass_count" -le $MAXPASSCNT ]
do
  . $0   # Script "sources" itself, rather than calling itself.
         # ./$0 (which would be true recursion) doesn't work here. Why?
done  

#  What occurs here is not actually recursion,
#+ since the script effectively "expands" itself, i.e.,
#+ generates a new section of code
#+ with each pass through the 'while' loop',
#  with each 'source' in line 20.
#
#  Of course, the script interprets each newly 'sourced' "#!" line
#+ as a comment, and not as the start of a new script.

echo

exit 0   # The net effect is counting from 1 to 100.
         # Very impressive.

# Exercise:
# --------
# Write a script that uses this trick to actually do something useful.
exit
Unconditionally terminates a script. [6] The exit command may optionally take an integer argument, which is returned to the shell as the exit status of the script. It is good practice to end all but the simplest scripts with an exit 0, indicating a successful run.

Note	
If a script terminates with an exit lacking an argument, the exit status of the script is the exit status of the last command executed in the script, not counting the exit. This is equivalent to an exit $?.

Note	
An exit command may also be used to terminate a subshell.

exec
This shell builtin replaces the current process with a specified command. Normally, when the shell encounters a command, it forks off a child process to actually execute the command. Using the exec builtin, the shell does not fork, and the command exec'ed replaces the shell. When used in a script, therefore, it forces an exit from the script when the exec'ed command terminates. [7]

Example 15-24. Effects of exec

#!/bin/bash

exec echo "Exiting \"$0\" at line $LINENO."   # Exit from script here.
# $LINENO is an internal Bash variable set to the line number it's on.

# ----------------------------------
# The following lines never execute.

echo "This echo fails to echo."

exit 99                       #  This script will not exit here.
                              #  Check exit value after script terminates
                              #+ with an 'echo $?'.
                              #  It will *not* be 99.
Example 15-25. A script that exec's itself

#!/bin/bash
# self-exec.sh

# Note: Set permissions on this script to 555 or 755,
#       then call it with ./self-exec.sh or sh ./self-exec.sh.

echo

echo "This line appears ONCE in the script, yet it keeps echoing."
echo "The PID of this instance of the script is still $$."
#     Demonstrates that a subshell is not forked off.

echo "==================== Hit Ctl-C to exit ===================="

sleep 1

exec $0   #  Spawns another instance of this same script
          #+ that replaces the previous one.

echo "This line will never echo!"  # Why not?

exit 99                            # Will not exit here!
                                   # Exit code will not be 99!
An exec also serves to reassign file descriptors. For example, exec <zzz-file replaces stdin with the file zzz-file.

Note	
The -exec option to find is not the same as the exec shell builtin.

shopt
This command permits changing shell options on the fly (see Example 25-1 and Example 25-2). It often appears in the Bash startup files, but also has its uses in scripts. Needs version 2 or later of Bash.

shopt -s cdspell
# Allows minor misspelling of directory names with 'cd'
# Option -s sets, -u unsets.

cd /hpme  # Oops! Mistyped '/home'.
pwd       # /home
          # The shell corrected the misspelling.

caller
Putting a caller command inside a function echoes to stdout information about the caller of that function.

#!/bin/bash

function1 ()
{
  # Inside function1 ().
  caller 0   # Tell me about it.
}

function1    # Line 9 of script.

# 9 main test.sh
# ^                 Line number that the function was called from.
#   ^^^^            Invoked from "main" part of script.
#        ^^^^^^^    Name of calling script.

caller 0     # Has no effect because it's not inside a function.

A caller command can also return caller information from a script sourced within another script. Analogous to a function, this is a "subroutine call."

You may find this command useful in debugging.

Commands

true
A command that returns a successful (zero) exit status, but does nothing else.

bash$ true
bash$ echo $?
0
	      
# Endless loop
while true   # alias for ":"
do
   operation-1
   operation-2
   ...
   operation-n
   # Need a way to break out of loop or script will hang.
done

false
A command that returns an unsuccessful exit status, but does nothing else.

bash$ false
bash$ echo $?
1
	      
# Testing "false" 
if false
then
  echo "false evaluates \"true\""
else
  echo "false evaluates \"false\""
fi
# false evaluates "false"


# Looping while "false" (null loop)
while false
do
   # The following code will not execute.
   operation-1
   operation-2
   ...
   operation-n
   # Nothing happens!
done   

type [cmd]
Similar to the which external command, type cmd identifies "cmd." Unlike which, type is a Bash builtin. The useful -a option to type identifies keywords and builtins, and also locates system commands with identical names.

bash$ type '['
[ is a shell builtin
bash$ type -a '['
[ is a shell builtin
 [ is /usr/bin/[


bash$ type type
type is a shell builtin
	      
The type command can be useful for testing whether a certain command exists.

hash [cmds]
Records the path name of specified commands -- in the shell hash table [8] -- so the shell or script will not need to search the $PATH on subsequent calls to those commands. When hash is called with no arguments, it simply lists the commands that have been hashed. The -r option resets the hash table.

bind
The bind builtin displays or modifies readline [9] key bindings.

help
Gets a short usage summary of a shell builtin. This is the counterpart to whatis, but for builtins. The display of help information got a much-needed update in the version 4 release of Bash.

bash$ help exit
exit: exit [n]
    Exit the shell with a status of N.  If N is omitted, the exit status
    is that of the last command executed.
	      
Notes
[1]	
As Nathan Coulter points out, "while forking a process is a low-cost operation, executing a new program in the newly-forked child process adds more overhead."

[2]	
An exception to this is the time command, listed in the official Bash documentation as a keyword ("reserved word").

[3]	
Note that let cannot be used for setting string variables.

[4]	
To Export information is to make it available in a more general context. See also scope.

[5]	
An option is an argument that acts as a flag, switching script behaviors on or off. The argument associated with a particular option indicates the behavior that the option (flag) switches on or off.

[6]	
Technically, an exit only terminates the process (or shell) in which it is running, not the parent process.

[7]	
Unless the exec is used to reassign file descriptors.

[8]	

Hashing is a method of creating lookup keys for data stored in a table. The data items themselves are "scrambled" to create keys, using one of a number of simple mathematical algorithms (methods, or recipes).

An advantage of hashing is that it is fast. A disadvantage is that collisions -- where a single key maps to more than one data item -- are possible.

For examples of hashing see Example A-20 and Example A-21.

[9]	
The readline library is what Bash uses for reading input in an interactive shell.

Prev	Home	Next
Commands	Up	Job Control Commands
